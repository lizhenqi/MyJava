<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.kaishengit.mapper.UserMapper">

    <select id="findId" resultType="com.kaishengit.pojo.User" parameterType="int" resultMap="userMap">
        SELECT t_user.*,t_tag.tagname,t_tag.id as `tagid`,t_tag.userid from t_user
        INNER JOIN t_tag ON t_user.id=t_tag.userid
        WHERE t_user.id=#{id}

    </select>
    <resultMap id="userMap" type="User">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="email" property="email"/>
        <result column="avatar" property="avatar"/>
        <result column="createtime" property="createtime"/>
        <result column="loginip" property="loginip"/>
        <result column="logintime" property="logintime"/>
        <result column="state" property="state"/>

        <collection property="tagList" ofType="Tag">
            <id column="tagid" property="id"/>
            <result column="tagname" property="tagname"/>
            <result column="userid" property="userid"/>
        </collection>


    </resultMap>

    <!--
        增加以及获取刚刚插入的对象的主键id的值。
        useGeneratedKeys：是否使用自动生成的主键值
        keyProperty：属性

    -->
    <insert id="save" parameterType="com.kaishengit.pojo.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_user(username, password, email, avatar, createtime, loginip, logintime, state)
        VALUES (#{username},#{password},#{email},#{avatar},#{createtime},#{loginip},#{logintime},#{state})
    </insert>


    <delete id="delete" parameterType="int">
        DELETE from t_user WHERE id=#{id}
    </delete>

    <update id="update" parameterType="com.kaishengit.pojo.User">
        update t_user
        --       <!--<set>和直接set的作用差不多，<set>可以自动去掉多余的“，”号.当然这个完全可以用trim-prefix="set"->suffixOverrides=","代替-->
        <set>
            <if test="username !=null">
                username=#{username},
            </if>
            <if test="password !=null">
                password=#{password},
            </if>
            <if test="email  !=null">
                email =#{email },
            </if>
            <if test="avatar !=null">
                avatar=#{avatar},
            </if>
            <if test="loginip !=null">
                loginip=#{loginip}
            </if>
            <if test="logintime !=null">
                logintime=#{logintime}
            </if>
            <if test="state !=null">
                state=#{state}
            </if>
        </set>
        WHERE id =#{id}


        <!--UPDATE t_user SET username=#{username},password=#{password},address=#{address} WHERE id=#{id}-->
    </update>

    <select id="findAll" resultType="com.kaishengit.pojo.User">
         SELECT id,username,password from t_user
    </select>


    <!--封装成map时候-->
    <select id="findMap" parameterType="map" resultType="User">
        SELECT id,username,password from t_user where username=#{username} and  password=#{password}
    </select>


    <!-- 注意多个参数的时候parameterType不要写，否则错-->
    <select id="findParam" resultType="User">
        <!--方法一：注意在传参时候和上面的区别，paramx是第几个x就是几-->
        <!--SELECT id,username,password,address FROM t_user where username=#{param1} and password=#{param2}-->

        <!--方法二：UserMapper里面对应的id内的参数前用注解：@Param("xx").：下面的#{yy}，yy要和xx一样。-->
        SELECT id,username,password FROM t_user where username=#{username} and password=#{pwd}

    </select>
    <select id="findByParam" parameterType="map" resultType="User">
        SELECT *from t_user


        <trim prefix="where" prefixOverrides="and|or">
            <if test="username !=null and username !=''">
                username=#{username}
            </if>
            <choose>
                <when test="password !=null and password !=''">
                    and password=#{password}
                </when>
                <when test="email !=null and email !=''">
                    and email=#{email}
                </when>
            </choose>
        </trim>


        <!-- where:
        1:当where中有任意一个条件成立，则添加where。
        2：当以and 或是or开头则，去掉and 或是or
        -->
        <!--<where>-->
        <!--<if test="username !=null and username !=''">-->
        <!--username=#{username} -->
        <!--</if>-->


        <!--按顺序只要满足一个就不继续执行了（二选一）-->
        <!--<choose>-->
        <!--<when test="password !=null and password !=''">-->
        <!--and password=#{password}-->
        <!--</when>-->
        <!--<when test="email !=null and email !=''">-->
        <!--and email=#{email}-->
        <!--</when>-->
        <!--<otherwise>-->
        <!--and 2=2-->
        <!--</otherwise>-->
        <!--</choose>-->


        <!--<if test="password !=null and password !=''">-->
        <!--and password=#{password}-->
        <!--</if>-->
        <!--<if test="email !=null and email !=''">-->
        <!--and email=#{email} -->
        <!--</if>-->
        <!--</where>-->
    </select>
    <select id="findByPage" resultType="User">
        select * from t_user limit ${start},${size} ;
    </select>


</mapper>